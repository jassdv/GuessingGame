function generateWinningNumber(){
	var max=100;
	var min=1;
	return Math.floor(Math.random()*max)+min;

}

function shuffle(arr){
	var m = arr.length, t, i;
	// While there remain elements to shuffle…
  	while (m) {

    	// Pick a remaining element…
    	i = Math.floor(Math.random() * m--);

    	// And swap it with the current element.
    	t = arr[m];
    	arr[m] = arr[i];
    	arr[i] = t;
  	}
	return  arr;

}

function Game(){
	this.playersGuess=null;
	this.pastGuesses=[];
	this.winningNumber=generateWinningNumber();
}

Game.prototype.difference=function(){
	var diff=this.playersGuess-this.winningNumber;
	if(diff<0)
		return (diff*(-1));
	else
		return diff;
}

Game.prototype.isLower=function(){
	if(this.playersGuess<this.winningNumber){
		return true;

	}
	else{
		return false;

	}

}

Game.prototype.playersGuessSubmission=function(guessNum){
	if((guessNum<=0)||(guessNum>100)||(typeof(guessNum)!="number")){
		throw "That is an invalid guess.";
		

	}
	else{
		this.playersGuess=guessNum;
		return this.checkGuess(guessNum);
	}
	

}

Game.prototype.checkGuess=function(num){
	if(num===this.winningNumber)
		return "You Win!";
	else if(this.pastGuesses.indexOf(num)!=(-1)){
		return "You have already guessed that number.";

	}
	else{
		this.pastGuesses.push(num);

	}
	if(this.pastGuesses.length===5){
		return "You Lose.";

	}
	else if(this.difference()<10){
		return "You\'re burning up!";

	}
	else if(this.difference()<25){
		return "You\'re lukewarm.";

	}
	else if(this.difference()<50){
		return "You\'re a bit chilly.";

	}
	else
		return "You\'re ice cold!";

	
	
}

function newGame(){
	return new Game();
}


Game.prototype.provideHint=function(){
	var hintArr=[];
	hintArr.push(this.winningNumber);
	hintArr.push(generateWinningNumber());
	hintArr.push(generateWinningNumber()); 
	hintArr=shuffle(hintArr);
	return hintArr;

}

 
$(document).ready(function(){
	var game=new Game();
	var userInput;
	$('#submit').on('click',function(){
		//console.log("submitting");
		//debugger;
		userInput=+$('#input-player').val();//.find('#input-player').first();
		$('#input-player').val("");
		var checkRes=game.playersGuessSubmission(userInput);
		if(checkRes==="You have already guessed that number."){
			$("h1").text("You've already guessed that....please guess again");

		}
		else{
			//displaying the guess
			var guessListIndx=game.pastGuesses.length-1;
			$('li').slice(guessListIndx,guessListIndx+1).text(userInput);
		}
		if((checkRes==="You Win!")||(checkRes==="You Lose.")){
			$("h1").text(checkRes);
			$('h2').text("please click on the reset button to start a new game");
			$('#input-player').prop('disabled', 'true');
			$('#hint').prop('disabled', 'true');

		}
		else{
			$('h1').text(checkRes);
			if(game.isLower()){
				$('h2').text("please pick a higher number....");
			}
			else{
				$('h2').text("please pick a lower number....");
			}
		}

		
	});
	//reset event
	$('#reset').on('click',function(){
		//creating new game instance
		//reset the title and subtitle(h1 and h2)
		//set Guess proprties to default
		//make sure 'reset' and 'hint' are enables
		
		for(var i=0;i<game.pastGuesses.length;i++){
			game.pastGuesses.pop();

		}
		game=newGame();
		$('h1').text("Welcome to Guessing Game");
		$('h2').text("Guess A number between 1-100");
		var countList=$('.guessItem').length;
		var curLstElm=$('.guessItem').first();
		for(var i=1;i<=countList;i++){
			curLstElm.text("guess "+i);
			curLstElm=curLstElm.next();

		}
		//$('#input-player').css('disabled', 'false');
		$('#input-player').removeAttr('disabled');
		$('#hint').removeAttr('disabled');





	});
	//get a hint
	$('#hint').on('click', function(){
		//show the three list options generated by your provideHint function in h1
		debugger;
		var hintArr=game.provideHint();
		var hintLine="The winning number is one of the following:"+hintArr.join(', ');
		$('h1').text(hintLine);
	});


});



Game.prototype.provideHint=function(){
	var hintArr=[];
	hintArr.push(this.winningNumber);
	hintArr.push(generateWinningNumber());
	hintArr.push(generateWinningNumber()); 
	hintArr=shuffle(hintArr);
	return hintArr;

}